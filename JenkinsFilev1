pipeline {
    agent {
        label "jenkins-agent"


    } // This specifies that the pipeline can run on any available agent

    tools {
        maven 'Maven3'
        jdk 'Java17'

      
    }

    environment {
        APP_NAME = "complete-prodcution-e2e-pipeline"
        RELEASE = "1.0.0"
        DOCKER_USER = "taithuyet96"
        DOCKER_PASS = 'dockerhub'
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"

    }

    stages {
        stage('CleanWorkSpace') {
            steps {
                // clean work space
                cleanWs()
            }
        }

        stage('Check out SCM') {
            steps {
                git branch: 'main', credentialsId: 'git_hub', url: 'https://github.com/taithuyet96/complete-prodcution-e2e-pipeline.git'

                // Run build commands
                // For a Java project using Maven, it might look like this:
                // sh 'mvn clean package'
                
                // Or for a Node.js project:
                // sh 'npm install'
                // sh 'npm run build'
            }
        }
        stage('Buil Application') {
            steps {
                sh "mvn clean package"
                sh "mvn -X clean install"
        
            }
        }
        stage('Test Application') {
            steps {
                sh "mvn test"
                // Run build commands
                // For a Java project using Maven, it might look like this:
                // sh 'mvn clean package'
                
                // Or for a Node.js project:
                // sh 'npm install'
                // sh 'npm run build'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'jenkins-sonartoken') {
                        sh "mvn sonar:sonar - e -X" 
                      
                    }
                }       
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
                }
            }

        }

             stage("Build & Push Docker Image") {
            steps {
                script {
                    docker.withRegistry('',DOCKER_PASS) {
                        docker_image = docker.build "${IMAGE_NAME}"
                    }

                    docker.withRegistry('',DOCKER_PASS) {
                        docker_image.push("${IMAGE_TAG}")
                        docker_image.push('latest')
                    }
                }
            }

        }
        

    }
    
}
    
